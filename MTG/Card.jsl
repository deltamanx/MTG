package MTG;
import java.awt.*;

/**
 * Summary description for Card.
 */
public class Card
{
	//BLACK = 4,
	//WHITE = 5,
	//BLUE = 2,
	//RED = 1,
	//GREEN = 3,
	//ARTIFACT = 6,
	//ANY = 0,
	//NONE = -1
	private CardColor cardCol = CardColor.NONE;
	//-1 = NONE,
	//1 = Monster,
	//2 = Sorcery,
	//3 = Instant,
	//4 = Land
	private Type cardType = Type.NONE;

	//Card Texts
	private String cardName = null;
	private String cardText = null;

	//Card cost
	private CardColor manaType1 = CardColor.NONE;
	private int manaCost1 = 0;
	private CardColor manaType2 = CardColor.NONE;
	private int manaCost2 = 0;

	//Monster Exclusive
	protected MonsterStats stats = null;
	protected int monAbilities = 0;

	//Booleans
	protected boolean p = false;
	protected boolean s = false;
	protected boolean m = false;

	enum CardColor
	{
		RED(1),
		BLUE(2),
		GREEN(3),
		BLACK(4),
		WHITE(5),
		ARTIFACT(6),
		COLORLESS(7),
		ANY(0),
		NONE(-1);
	}
	enum Type
	{
		MONSTER(1),
		SORCERY(2),
		INSTANT(3),
		LAND(4),
		NONE(-1);
	}
	enum SubType
	{
		NEGATE(1),
		DAMAGE(2),
		BUFF(3),
		DEBUFF(4),
		TAP(5),
		DESTROY(6),
		OTHER(7);
	}

	public Card()
	{
	}

	public Card(String name, Type type, CardColor color)
	{
		cardName = name;
		cardType = type;
		cardCol = color;
	}

	//Method
	public static CardColor getColorByName(String color)
	{
		if (CardColor.ANY.toString().equalsIgnoreCase(color))
			return CardColor.ANY;
		else if (CardColor.RED.toString().equalsIgnoreCase(color))
			return CardColor.RED;
		else if (CardColor.BLUE.toString().equalsIgnoreCase(color))
			return CardColor.ANY;
		else if (CardColor.BLUE.toString().equalsIgnoreCase(color))
			return CardColor.ANY;
		else if (CardColor.GREEN.toString().equalsIgnoreCase(color))
			return CardColor.GREEN;
		else if (CardColor.ARTIFACT.toString().equalsIgnoreCase(color))
			return CardColor.ARTIFACT;
		if (CardColor.WHITE.toString().equalsIgnoreCase(color))
			return CardColor.WHITE;
		if (CardColor.BLACK.toString().equalsIgnoreCase(color))
			return CardColor.BLACK;
		else
			return CardColor.NONE;
	}

	//Set get pairs

	//Name
	public String getName()
	{
		return cardName;
	}
	protected void setName(String name)
	{
		cardName = name;
	}

	//Type
	public Type getType()
	{
		return cardType;
	}
	protected void setType(Type type)
	{
		cardType = type;

	}

	//Color
	public CardColor getColor()
	{
		return cardCol;
	}
	protected void setColor(CardColor color)
	{
		cardCol = color;
	}

	//Text
	public String getCardText()
	{
		return cardText;
	}
	protected void setCardText(String text)
	{
		cardText = text;
	}

	//Mana Cost #1
	protected void setManaType1(CardColor color)
	{
		manaType1 = color;
	}
	protected void setManaCost1(int cost)
	{
		manaCost1 = cost;
	}
	public CardColor getManaType1()
	{
		return manaType1;
	}
	public int getManaCost1()
	{
		return manaCost1;
	}

	//Mana Cost #2
	protected void setManaType2(CardColor color)
	{
		manaType2 = color;
	}
	protected void setManaCost2(int cost)
	{
		manaCost2 = cost;
	}
	public CardColor getManaType2()
	{
		return manaType2;
	}
	public int getManaCost2()
	{
		return manaCost2;
	}

	public boolean equals(Card card)
	{
		if (card.getName().equals(getName()))
		{
			if (card.getColor().Equals(getColor()))
			{
				return true;
			}
		}
		return false;
	}

	class MonsterStats
	{
		private int attack = 0, toughness = 1;
		private int atkPlusCounters = 0, atkMinusCounters = 0;
		private int tgnPlusCounters = 0, tgnMinusCounters = 0;

		public MonsterStats(int attack, int toughness)
		{
			this.attack = attack;
			this.toughness = toughness;
		}

		//Attack
		protected void setAttack(int attack)
		{
			this.attack = attack;
		}
		public int getAttack()
		{
			return attack;
		}

		//Tougness
		protected void setToughness(int toughness)
		{
			this.toughness = toughness;
		}
		public int getToughness()
		{
			return toughness;
		}

		//Attack Plus Counters
		protected void setAtkPlusCounters(int counters)
		{
			atkPlusCounters = counters;
		}
		public int getAtkPlusCounters()
		{
			return atkPlusCounters;
		}
		protected void addAtkPlusCounter()
		{
			atkPlusCounters += 1;
		}

		//Attack Minus Counters
		protected void setAtkMinusCounters(int counters)
		{
			atkMinusCounters = counters;
		}
		public int getAtkMinusCounters()
		{
			return atkPlusCounters;
		}
		protected void addAtkMinusCounter()
		{
			atkMinusCounters += 1;
		}

		//Tougness Plus Counters
		protected void setTgnPlusCounters(int counters)
		{
			tgnPlusCounters = counters;
		}
		public int getTgnPlusCounters()
		{
			return tgnPlusCounters;
		}
		protected void addTgnPlusCounter()
		{
			tgnPlusCounters += 1;
		}

		//Tougness Minus Counters
		protected void setTgnMinusCounters(int counters)
		{
			tgnMinusCounters = counters;
		}
		public int getTgnMinusCounters()
		{
			return tgnMinusCounters;
		}
		protected void addTgnMinusCounter()
		{
			tgnMinusCounters += 1;
		}

		//Stats with counters
		public int getAtkWithCounters()
		{
			return attack + atkPlusCounters - atkMinusCounters;
		}
		public int getToughnessWithCounters()
		{
			return toughness + tgnPlusCounters - tgnMinusCounters;
		}
	}

	enum MonsterAbilities
	{
		TAP_CREATURE(1),
		TAP_FOR_MANA(2),
		TAP_FOR_MANA2(4),
		TAP_TO_PING1(8),
		TAP_TO_PING2(16),
		DEATHTOUCH(32),
		INTIMIDATE(64),
		INDISTRUCTIBLE(128),
		UNBLOCKABLE(256),
		KICKER(512),
		FLYING(1024),
		DEFENDER(2048),
		REACH(4096),
		HASTE(8192),
		FIRST_STRIKE(16384),
		BUFF01(32768),
		MUST_ATTACK(65536);
	}

	protected int monsterAbilityNum(MonsterAbilities[] monAbil)
	{
		int num = 0;
		for (int i = 0; i < monAbil.length; i++)
			num += monAbil[i].hashCode();
		return num;
	}
}
